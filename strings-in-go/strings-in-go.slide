# Strings in Go

Gianluca Bortoli


25 Mar 2023
(Inspired by go.dev/blog/slices and go.dev/blog/strings)


## What is a slice?

* Data structure describing a contiguous section of an array stored separately from the slice itself
* A "view" of an array, not an array
* Arrays are building blocks for other variable-sized data structures

```
var a [123]int // array, the size is part of the type definition
var s []int    // slice
```


## What is a string?

* Read-only slice of bytes with some syntactic sugar
  * No need for capacity
  * Cannot grow in size
  * For all the rest it's "just" a slice
* Holds arbitrary bytes, not necessarily something nice to print


## If strings hold bytes, what's a character?

Unicode refers to “code point” to identify the item represented by a single value
(eg. the unicode code point U+0061 is the lower case letter ‘A’: ‘a‘ of the Latin alphabet)

Unicode is a character set, translates ~characters to numbers

UTF-8 is a (variable-length) encoding, translates numbers to binary

In Go:
* Source code is always UTF-8
* The `rune` type is the unicode "code point" equivalent (alias for `int32`)


## Iterating a string

.play normal-for.go
.play for-range.go


## Iterating a string (cont'd)

The `for range` loop on a `string` treats UTF-8 in a special way

Decodes one UTF-8-encoded rune on each iteration

Every cycle:
* The index is the starting position of the current `rune`, measured in bytes
* The value is the code point
