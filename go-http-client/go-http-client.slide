# HTTP connection churn in Go

Gianluca Bortoli


8 November 2023


## What is connection churn?

When a service frequently opens and closes network connections instead of
reusing existing ones (if possible).

Can be noticable and problematic on high traffic services.


## Common mistakes in Go

1. Not fully reading and closing response body.
2. Using default HTTP client.


## 1.1 Not fully reading response body

Always read the entire response body, either in a single shot or in chunks.

    io.ReadAll(resp.Body)

Do it even if you don't care about it and throw it in `/dev/null`.

    io.Copy(io.Discard, resp.Body)


## 1.2 Not closing response body

From [src/net/http/response.go](https://cs.opensource.google/go/go/+/refs/tags/go1.21.4:src/net/http/response.go;l=59-64)

    type Response struct {
        ...

        // It is the caller's responsibility to close Body. The default HTTP client's
        // Transport may not reuse HTTP/1.x "keep-alive" TCP connections if the Body is
        // not read to completion and closed.
        // ...
        Body io.ReadCloser

        ...
    }

~Always done in a `defer`.


## 1.3 Common pattern


    resp, err := http.Get("http://example.com")
    if err != nil {
        // ...
    }
    defer resp.Close()

    body, err := io.ReadAll(resp.Body)
    // ...


## Default HTTP client

Go makes it very easy to make HTTP requests

    client := &http.Client{}
    client.Get("http://example.com")

but the default HTTP client defaults aren't great for production use.


## Default HTTP client - connection pooling

Uses an LRU cache for persistent connection pooling to allow reuse.

From [src/net/http/transport.go](https://cs.opensource.google/go/go/+/master:src/net/http/transport.go;l=38-58?q=DefaultTransport&ss=go%2Fgo)

    // DefaultTransport is the default implementation of Transport and is
    // used by DefaultClient. It establishes network connections as needed
    // and caches them for reuse by subsequent calls.
    // ...
    var DefaultTransport RoundTripper = &Transport{
        // ...
        MaxIdleConns:          100,
        IdleConnTimeout:       90 * time.Second,
        // ...
    }

    // DefaultMaxIdleConnsPerHost is the default value of Transport's
    // MaxIdleConnsPerHost.
    const DefaultMaxIdleConnsPerHost = 2


## Default HTTP client - connection pooling

`MaxIdleConns` * `DefaultMaxIdleConnsPerHost` is a good estimate of the maximum
number of open connections.

Tweak these settings to fit your use case.

Don't exaggerate or you'll run out of resources (and maybe file descriptors too!).


## Benefits of low connection churn

* Lower latency on subsequent requests (no TLS handshaking, no slow start)
* Less CPU usage (TLS handshake can be _very_ CPU intensive!)
